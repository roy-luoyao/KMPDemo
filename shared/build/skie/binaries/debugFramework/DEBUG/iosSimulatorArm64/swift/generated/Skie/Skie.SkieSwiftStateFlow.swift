// Generated by Touchlab SKIE 0.8.2

import Foundation

public final class SkieSwiftStateFlow<T> : shared.SkieSwiftFlowProtocol,
        shared.SkieSwiftFlowInternalProtocol, Swift._ObjectiveCBridgeable {

    let delegate: shared.Kotlinx_coroutines_coreStateFlow

    public var value: T {
        delegate.value as! T
    }

    public var replayCache: [T] {
        delegate.replayCache as! [T]
    }

    init(`internal` flow: shared.Kotlinx_coroutines_coreStateFlow) {
        delegate = flow
    }

    public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftStateFlow<T>?) -> Swift.Void {
        result = fromObjectiveC(source)
    }

    public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftStateFlow<T>?) -> Swift.Bool {
        result = fromObjectiveC(source)
        return true
    }

    public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinStateFlow<Swift.AnyObject>?) -> Self {
        return fromObjectiveC(source)
    }

    public func _bridgeToObjectiveC() -> shared.SkieKotlinStateFlow<Swift.AnyObject> {
        return shared.SkieKotlinStateFlow(delegate)
    }

    private static func fromObjectiveC(_ source: shared.SkieKotlinStateFlow<Swift.AnyObject>?) -> Self {
        guard let source = source else {
            fatalError("Couldn't map value of \(Swift.String(describing: source)) to shared.SkieSwiftStateFlow")
        }
        return .init(internal: source)
    }

    public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T> {
        return SkieSwiftFlowIterator(flow: delegate)
    }

    public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>

    public typealias Element = T

    public typealias _ObjectiveCType = shared.SkieKotlinStateFlow<Swift.AnyObject>

}
